{"version":3,"sources":["store/actions.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/api.ts","components/TodoList/TodoList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionType","OptionValue","setUserAction","payload","type","SET_USER","getUserSelector","state","user","CurrentUser","dispatch","useDispatch","useSelector","className","id","name","email","phone","onClick","API","getUserById","userId","a","fetch","response","json","getTodos","deleteTodo","todoId","method","TodoList","useState","query","setQuery","optionValue","setOptionValue","todos","All","filter","todo","title","includes","Active","completed","Completed","getTodosSeclectors","useEffect","loadTodosFromServer","todosFromServer","SET_TODOS","getUser","userFromServer","deleteTodoFromServer","DELETE_TODO","placeholder","value","onChange","event","target","disabled","map","classname","readOnly","checked","App","InitialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48cdf77b.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  DELETE_TODO = 'DELETE_TODO',\n}\n\nexport interface SetTodosAction {\n  type:ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface SetUserAction {\n  type:ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport interface DeleteTodoAction {\n  type:ActionType.DELETE_TODO,\n  payload: Todo[],\n}\n\nexport type Action = SetTodosAction | SetUserAction | DeleteTodoAction;\n\nexport const setTodosAction = (payload: Todo[]):Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null):Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const setDeleteTodoAction = (payload: Todo[]):Action => ({\n  type: ActionType.DELETE_TODO,\n  payload,\n});\n","/* eslint-disable max-len */\nimport { State } from '../react-app-env';\n\nexport enum OptionValue {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\nexport const getTodosSeclectors = (optionValue:OptionValue | string, query:string) => {\n  return (state:State) => {\n    switch (optionValue) {\n      case OptionValue.All:\n        return state.todos.filter(todo => (\n          todo.title.includes(query)\n        ));\n      case OptionValue.Active:\n        return state.todos.filter(todo => (\n          todo.completed === false\n          && todo.title.includes(query)\n        ));\n      case OptionValue.Completed:\n        return state.todos.filter(todo => (\n          todo.completed === true\n          && todo.title.includes(query)\n        ));\n      default:\n        return state.todos.filter(todo => (\n          todo.title.includes(query)\n        ));\n    }\n  };\n};\n\nexport const getUserSelector = (state:State) => state.user;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\nimport './CurentUser.scss';\n\nexport const CurrentUser:React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n\n  if (!user) {\n    return (\n      <p>No user selected</p>\n    );\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button--selected button\"\n        onClick={() => dispatch(setUserAction(null))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","const API = 'https://mate.academy/students-api/';\n\nexport const getUserById = async (userId:number) => {\n  const response = await fetch(`${API}users/${userId}`);\n\n  return response.json();\n};\n\nexport const getTodos = async () => {\n  const response = await fetch(`${API}todos`);\n\n  return response.json();\n};\n\nexport const deleteTodo = async (todoId:number) => {\n  await fetch(`${API}todos/${todoId}`, { method: 'DELETE' });\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classname from 'classnames/bind';\nimport { deleteTodo, getTodos, getUserById } from '../../api/api';\nimport { setDeleteTodoAction, setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSeclectors, OptionValue } from '../../store/selectors';\n\nexport const TodoList:React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [optionValue, setOptionValue] = useState(' ');\n  const todos = useSelector(getTodosSeclectors(optionValue, query));\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserById(id);\n\n    dispatch(setUserAction(userFromServer));\n  };\n\n  const deleteTodoFromServer = async (id: number) => {\n    await deleteTodo(id);\n    const todosFromServer = await getTodos();\n\n    dispatch(setDeleteTodoAction(todosFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        id=\"search-query\"\n        name=\"query\"\n        className=\"input\"\n        placeholder=\"Type search word\"\n        value={query}\n        onChange={(event) => (\n          setQuery(event.target.value)\n        )}\n      />\n      <select\n        value={optionValue}\n        onChange={(event) => {\n          setOptionValue(event.target.value);\n        }}\n      >\n        <option disabled value=\" \">Choose option</option>\n        <option value={OptionValue.All}>All</option>\n        <option value={OptionValue.Active}>Active</option>\n        <option value={OptionValue.Completed}>Completed</option>\n\n      </select>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classname('TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n              <div>\n                <button\n                  className={classname('TodoList__user-button button',\n                    { 'TodoList__user-button--selected': !todo.completed })}\n                  type=\"button\"\n                  onClick={() => getUser(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"button is-danger\"\n                  onClick={() => deleteTodoFromServer(todo.id)}\n                >\n                  Remove\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\n\nconst App:React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { Action, ActionType } from './actions';\n\nconst InitialState:State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = InitialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.DELETE_TODO:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { store } from './store';\nimport 'bulma/css/bulma.min.css';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}